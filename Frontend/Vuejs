◆Vue.js分からないことリスト
- [ ] Vuex
- [ ] コンポーネント
- [ ] Store, stateの管理
- [ ] mutations
- [ ] getters
- [ ] 非同期処理
- [ ] Router
- [ ] compute
- [ ] template

◆参照
https://www.udemy.com/course/vue-js-complete-guide/learn/lecture/15371018#content
https://jp.vuejs.org/v2/api/

◆メモ
# 学習目的
実務でVueを実装できるようにするため。

# ライフサイクル
- https://jp.vuejs.org/v2/guide/instance.html#%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%83%80%E3%82%A4%E3%82%A2%E3%82%B0%E3%83%A9%E3%83%A0
- https://qiita.com/ksh-fthr/items/2a9f173c706ef6939f93

# 主要なディレクティブ
https://prograshi.com/language/vue-js/list-of-main-directives/

# ディレクティブとして指定できるイベント一覧
https://developer.mozilla.org/en-US/docs/Web/Events

# data
あくまで初期値を設定するもの。
this.を使っても他のデータを参照することはできない。

# computedとmethodsの違いは？
computed: 依存関係に基づいてキャッシュされる。関係のない変更が加わったときには実行されない。いつ実行されるかというと、最初に描画されるときと、参照しているdataが変わった時だけ実行される。
method: テンプレートの中が少しでも変わって再描画されたときに実行される。関係のない変更が加わった時にも実行されてしまい、無駄があるという問題がある(大規模な開発なら問題になる)。onclickなどのディレクティブに指定するときは問題ないのだと思う。あくまでプロパティとして使うイメージ持っておくと良さそう。
  <script>
    new Vue({
      el: '#app',
      data: {
        counter: 0
      },
      computed: {
        lessThanThree: function() {
          return this.counter < 3 ? "less than 3" : "more than 3";
        }
      },
      methods: {
        lessThanThreeMethod: function() {
          return this.counter < 3 ? "less than 3" : "more than 3";
        }
      }
    });
  </script>

# ウォッチャ
特定のデータが変わったときに使用するもの。

# computedとウォッチャの違いは？
基本的にcomputedを使う。
computedでできないときにウォッチャを使う。
	具体的には、computedはテンプレート内で使っていないと、たとえ参照しているdataが変化しても実行されないので、そういう処理をしたいとき(非同期処理など)にウォッチャを使う。
computed: {
  lessThanThree: function() {
    return this.counter < 3 ? "less than 3" : "more than 3";
  }
},
watch: {
  counter: function(val) {
    console.log(val);
  }
}

# ()が必要な場合とそうでない場合の違いは？
{{}}内のmethodsは必ずつける(countMethod())。ディレクティブに指定する場合は()を付けなくてもいい(Vueの仕様)(@click="countMethod")。
{{}}内のcomputedはつけない。あくまでプロパティのような立ち位置だから。

# 条件付きレンダリング
v-elseを使う場合は、必ずv-if(or v-else-if)の直下に書くこと。
<div id="app">
  <p v-if="ok">OK</p>
  <p v-else>NG</p>
</div>

<div id="app">
  <p v-if="ok">OK</p>
  <p v-else-if="maybeOk">maybeOk</p>
  <p v-else>NG</p>
</div>

# template
画面上には描画されない要素。
グループ化するときなどに用いる。
<div id="app">
  <template v-if="ok">
    <p>Hello</p>
    <p>See you</p>
  </template>
</div>

<ul>
  <template v-for="fruit in fruits">
    <li>{{ fruit }}</li>
    <hr>
  </template>
</ul>

# v-ifとv-showの違い
v-showは、display: noneで見えないようにする。
  →デメリット
    templateでは使えない(templateは要素として表示されないため)。
    v-elseのようなことはできない(showの条件に!をつければできる)。
    初期描画が遅い(表示しない場合にも、domに要素は追加されるから)。
v-ifは、要素ごと消す。(ので、検証モードでも見えない)
  →デメリット
    表示しない場合は初期描画は早いが、逆に表示・非表示の切り替えをする場合は描画コストがかかる(わざわざ要素を消したり追加したりするから)。

使い分け方
  頻繁に表示・非表示を切り替える場合→v-showを使う。
  表示条件が初期描画時から変わらない場合→v-ifを使う。

# v-forを使うときの注意点
v-forは、要素の移動を最小限にするアルゴリズムを持っているため、v-for内部の要素が思った通りの組み合わせにならない場合がある。
そのような意図しない挙動を防ぐために、keyを指定する。
注意点は、keyとして一意のものを指定すること。
indexをしていすると、要素が移動したときにindexが変わるため、意図しない挙動となる場合があるので、idなどをデータに持たせたほうがいい。
<div id="app">
  <ul>
    <li v-for="fruit in fruits" :key="fruit">
      <p>{{ fruit }}</p>
      <input type="text">
    </li>
  </ul>
  <button @click="remove">remove</button>
</div>

<script>
  new Vue({
    el: "#app",
    data: {
      fruits: ["apple", "orange", "banana"],
    },
    methods: {
      remove: function() {
        this.fruits.shift();
      },
    }
  })
</script>

# vueインスタンスを複数作るには？
<div id="app1">
  {{message}}
</div>
<div id="app2">
  {{message}}
</div>

<script>
  new Vue({
    el: "#app1",
    data: {
      message: "instance1"
    }
  })
  new Vue({
    el: "#app2",
    data: {
      message: "instance2"
    }
  })
</script>
注意点: vueインスタンス間でデータのやり取りが必要な場合は、極力1つのインスタンスにまとめる。ロジックが複雑になり、保守性が損なわれるため。

# インスタンス外から、インスタンス内のデータを変える方法
let vm = new Vue({
  el: "#app1",
  data: {
    message: "instance1"
  }
})

vm.message = "書き換えられる"

https://jp.vuejs.org/v2/api/
ここの、インスタンスプロパティなどを見ると、取得できるプロパティやメソッドがかる。

# インスタンス内から、dataを取得する方法
    let vm = new Vue({
      el: "#app",
      data: {
        message: "メッセージ",
        message2: "メッセージ2",
      },
      computed: {
        getData: function() {
          return this.$data; # this.$dataは、インスタンス内のデータを取得する。
        },
      },
    })

# Vueのテンプレートの他の書き方
上に書いた例とは別の書き方がある。
例1)templateを使った書き方。
templateに要素を書く。
要素が複数行になったときに見通しが悪いのであまり使わない。

<div id="app2"></div>

new Vue({
  el: "#app2",
  data: {
    message: "メッセージ",
  },
  template: `
    <div>
      <h1>{{ message }}</h1>
    </div>
  `,
})

例2)render関数を使った書き方。
※createElementはdocument.createElementとはまったく別物。
ちなみにtemplateなどを使う場合も最終的にはrender関数を使っている。
renderのcreateElementでは、Vue.js用の仮想DOM(というか仮想ノード, javascriptのオブジェクト)を作成している。そして、VueではそれをもとにDOMを作成する。
document.createElementでは、直接DOMを作成している。
new Vue({
  data: {
    message: "メッセージ",
  },
  render: function(createElement) { # createElementはhと表記することも多い。
    return createElement('div', "これは" + this.message + "です"); # 第一引数に要素名、第二引数に要素に持たせたい値を指定する。
  },
}).$mount('#app3')
※$mount('#app3')はel: '#app3'と同義・

# 仮想DOMとは
DOMを模した、JavaScriotのオブジェクト。
DOMは、ブラウザに保持されたオブジェクト(検証モードで見ればわかる。表示状はHTMLっぽく表示されているが、生データはオブジェクトの形式。)。
仮想DOMはただのJavaScriptのオブジェクト。

Vueでは変更前の仮想DOMと変更後の仮想DOMを保持して、その差分を識別し、差分だけをDOMに反映させることで、パフォーマンスを向上させている。

# 同じようなVueインスタンスを使い回す方法→コンポーネントを使う
NG)elで指定した場合、一番はじめに合致したものが選択されるので、"こんにちは"は1つしか表示されない。
<hello></hello>
<hello></hello>
<hello></hello>

<script>
  new Vue({
    el: 'hello',
    template: '<p>こんにちは</p>',
  })
</script>

OK)componentを使う。(詳細は以下で説明)
<div>
  <hello></hello>
  <hello></hello>
</div>

<script>
  <!--  第一引数にコンポーネント名, 第二引数はVueインスタンスとほぼ同じものを取る -->
  Vue.component("hello", {
    template: "<p>こんにちは</p>",
  })
</script>

# Vue CLIを使った開発方法
## Vue CLIとは
Vueを使って大規模な開発をするときにつかう。
以下のようなことができる。
- ファイルの分割
- 最終的なコードの軽量化(ミニファイル化)
- Babel, TypeScript, ESLintなどのpluginの使用
- ホットリロード(HMR(Hot Module Replacement))
- .vue, TS, SCSS, Pug, ES6などの使用

# コンポーネント
Vueインスタンスを再利用するために使うもの。

## 使い方1: グローバル登録, どののvueインスタンスでも使い回し可能なコンポーネント作成方法
Vue.componentで作成する。
第一引数にコンポーネント名, 第二引数はVueインスタンスとほぼ同じものを取る(下の例参照)。
基本的にはグローバル登録でなくローカル登録を使う。

### 注意点
- dataは関数で受け取る必要がある点。
  - なぜか?
    - 通常のVueインスタンスのようにオブジェクトで渡してしまうと、同じコンポーネントを複数箇所で使っていた場合に、同じデータを参照してしまう(= どこかのコンポーネントでデータを変えた場合に他のコンポーネントでも同名のデータが変わってしまう(同じデータを参照しているためあたり前), vuejsの仕様)。

例)
<div id="app">
  <my-component></my-component> # 作成したコンポーネントを利用
  <my-component></my-component>
  <my-component></my-component>
</div>

<script>
  <!--  第一引数にコンポーネント名, 第二引数はVueインスタンスとほぼ同じものを取る -->
  Vue.component('my-component', { # ここでコンポーネントを作成
    data: function() { # 関数化し、returnでデータのobjectを返す。
      return {
        number: 12,
      }
    },
    ; data: { # これはだめ
    ;   number: 12
    ; },
    template: '<p>いいね{{ number }}</p>'
  })

  new Vue({
    el: '#app',
  })
</script>

## 使い方2: ローカル登録, 特定のvueインスタンスのみに使いまわし可能なコンポーネント作成方法
基本的にこちらを使う。

例)
<div id="app">
  <my-component></my-component>
  <my-component></my-component>
  <my-component></my-component>
</div>

const component =
  {                   # グローバル登録時に設定したVue.componentの第二引数とおなじものを渡せばOK
    data: function() {
    return {
      number: 12,
    }
  },
    template: '<p>いいね{{ number }}</p>'
  }

new Vue({
  el: '#app',
  components: {
    'my-component': component
  }
})

# .vueファイル
シングルファイル(単一ファイル)コンポーネント。
要はコンポーネント(オブジェクト, ローカル登録時のcomponentのようなもの？)を記載するファイル。
.vueファイルはビルド時に、コンポーネントのオブジェクトの形に整形され、exportされる(webpackが,.vue拡張子のファイルはいい感じに解釈してくれるため)。
基本的にimportして使う。

基本的に3つの構造でできている。
1. template
2. script
  基本的にexport defaultでexportする。
3. style

※最終的にimportされた場合は、1つのコンポーネントのオブジェクトとなる。
なので以下のように使える。

例1)
<script>
  import HelloWorld from './components/HelloWorld.vue'

  export default {
    name: 'App',
    components: {
      HelloWorld
    }
  }
</script>

例2)
import App from './App.vue'

new Vue({
  render: h => h(App),
}).$mount('#app')


# Vue Router
URL毎に違うコンポーネントを表示するために利用する仕組み。
URLにコンポーネントを関連付ける。
SPAが作成可能になる。

## 実装箇所
どこでもいい。
router.jsというファイルを作ってそこに実装することが多い。

## 実装方法
### import
import Vue from 'vue';
import Router from 'vue-router';

### 初期設定
Vue.use(Router); # useはプラグインを適用するという意味。プラグインは、Vue.js全体で使える機能のようなもの。規定の方法で自前のプラグインを作成すれば、カスタムプラグインも適用できる。

### URLとコンポーネントの関連付け
import Home from "./views/Home.vue"
import Users from "./views/Users.vue"
import UsersPosts from "./views/UsersPosts.vue"

export default new Router({
  routes: [
    {
      path: '/',
      compoent: Home
    },
    {
      path: '/users/:id', # /users/何らかの文字 のURLの場合Users componentが表示される。/usersの場合は表示されない。
      compoent: Users,
      children: [
        {
          path: 'posts', # /users/:id/post の場合に表示される。またこのURLの時、Usersコンポーネントも表示される。/postsにしないように注意。
          component: UsersPosts
        },
        ... # 他にも追加可能
      ]
    }
    # 豆知識: component側で $route.params.idとすると、URLの/users/123としたときの123が取り出せる。
  ]
})

### Routerの適用
// main.js
import Vue from 'vue'
import App from './App.vue'
import router from './router'

new Vue({
  router: router, # これを追加
  # or
  router, # ES6記法
  rener: h => h(App)
}).$mount("#app")

### App.vueにrouter-viewを追加
// App.vue
<template>
  <div>
    <router-view></router-view> ## これ。ここが動的コンポーネント的な感じとなる。ここがrouterに設定したURLごとのコンポーネントとなる。
  </div>
</template>

## vue-routerを使うとURLに#がつく理由
不必要にサーバーにアクセスさせないようにするための目印。
#以降のURLはURLとして認識しない。
e.g. https://localhost/#/users → https://localhostをリクエストする
この後にhttps://localhost/#/home としてもサーバーにリクエストしない(SPAなので、表示されるコンポーネントが変わるだけ)。

### #の外し方
history modeにすることで#を外すことができる。
ただし、こうするとリクエストは
https://localhost/users
となってしまう。
なので、https://localhost/何かしらの文字 としてリクエストが来たときには、https://localhostを返す(index.htmlを返す)ようにサーバー側で設定しなくてはならない。

export default new Router({
  mode: "history", # これ
  routes: [
    {
      path: '/',
      compoent: Home
    },
    {
      path: '/users',
      compoent: Users
    }
  ]
})

## クリックでURLを切り替える方法
### NGな例
これだと毎回リクエストをサーバーに飛ばしてしまう。
SPAとして実装している意味がない。

<template>
  <nav>
    <a href="/">Home</a>
    <a href="/users">Users</a>
  </nav>
  <div>
    <router-view></router-view>
  </div>
</template>

### OKな例
これだとサーバーにリクエストを送らずURL変更 & 表示の変更(router-viewのコンポーネントの変更)ができる。

<template>
  <nav>
    <router-link to="/">Home</router-link>
    <router-link to="/users">Users</router-link>
  </nav>
  <div>
    <router-view></router-view>
  </div>
</template>


### router-linkの属性
#### active-class
リンクがactiveなときに適用されるクラス。
/usersがつくURLであればactiveとして認識される(e.g. users/1でもactiveになる)。
/usersの完全一致にしたいなら、exactの属性も追加すればいい。

<router-link to="/users" active-class="link--active" exact>Home</router-link>

.link--active {
  何らかのstyle
}


## コードからURLを切り替える方法
<template>
  <button @click="toUsers">usersに遷移</button>
</template>

<script>
  export default {
    methods: {
      toUsers() {
        # これでVueのrouterにアクセスできる。push(遷移したいURL)とすることで遷移できる。
        this.$router.push('users');
        # or
        this.$router.push({path: 'users'});
      }
    }
  }
</script>

## クエリを使う方法

<template>
  <nav>
    <router-link to="/">Home</router-link>
    <router-link to="/users", query: {lang: 'ja', page: 2}>Users</router-link> # /users?lang=ja&page=2
  </nav>
  <div>
    <router-view></router-view>
  </div>
</template>


## 名前付きビューを使って固定されたレイアウトを作成する
1つのURLに対して2パターン以上表示させる。
ヘッダー, フッターなど固定で表示するものがある場合に使う。

<template>
  <div>
    <router-view name="header"></router-view>
    <router-view></router-view>
  </div>
</template>

export default new Router({
  mode: "history", # これ
  routes: [
    {
      path: '/',
      compoents: { # component→components
        default: Home, # router-viewで表示されるコンポーネント
        header: HeaderHome #  router-view name="header"で表示されるコンポーネント
      }
    },
    {
      path: '/users',
      compoent: Users
    },
  ]
})


## リダイレクトの実装方法
export default new Router({
  routes: [
    {
      path: '/',
      compoents: {
        default: Home,
        header: HeaderHome
      }
    },
    {
      path: '/users',
      compoent: Users
    },
    {
      path: '/hello', # これ
      redirect: '/'
      # or
      redirect: {path: '/'}
    },
    { # こう書くこともある
      path: "*",  # /user* とかもできる
      redirect: '/'
    }
  ]
})


# Vuex
ReactにおけるReduxだと思えばいい。
コンポーネント間のデータの受け渡しを、親子コンポーネント間のバケツリレーで行うのでなく、
Vuexに一旦保存し、そこからデータの受け渡しをできるようにするもの。

## 設定
vue-routerで行った感じでセットアップする。
store.jsというファイルを作ってそこに設定する場合が多い。

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex); # useの意味はrouterのところ参照。

export default new Vuex.Store({
  state: { # 状態, Vue.js全体で使えるグローバル変数のようなものを定義する。Reactで言うstore
    count: 2
  }
})

// main.js
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'

new Vue({
  router,
  store: store, # これを追加
  # or
  store, # ES6では同じものはこのように省略できる
  rener: h => h(App)
}).$mount("#app")

## データへのアクセス方法
<template>
  <div>
    <h3>Home</h3>
    <p>{{ count }}</p>
  </div>
</template>

<script>
  export default {
    computed: { # Vuexのプロパティを取得するときは基本的にcomputedを使う
      count() {
        return this.$store.state.count    # すべてのコンポーネントでこのようにアクセスできる, state, countはstore.jsに設定した名称
      }
    }
  }
</script>


## getters
Vuex用の算出プロパティのようなもの(computed)。
Reactにおけるselector。
同じ関数を複数のコンポーネントで使用するときに便利。
あくまでstore内のデータの読み取り専用なので、以下の例のようにstore内のデータに変更を加えても、
元データは変わらない。

// home.vue(getters未使用)
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
  </div>
</template>

<script>
  export default {
    computed: {
      doubleCount() {
        return this.$store.state.count * 2;
      }
    }
  }
</script>

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    count: 2
  },
  getters: { # ここに関数を置く。
    doubleCount: state => state.count * 2 # 第一引数にstate(上の行で定義しているstate)を受け取る。
  }
})

// home.vue(getters使用)
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
  </div>
</template>

<script>
  export default {
    computed: {
      doubleCount() {
        return this.$store.getters.doubleCount; # これ
      }
    }
  }
</script>


## mapGettersヘルパー
gettersに定義した関数を簡潔にimportするための技術。

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    count: 2
  },
  getters: {
    doubleCount: state => state.count * 2
    tripleCount: state => state.count * 3
  }
})

// home.vue( mapGetters使用)
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p> # 使える
    <p>{{ tripleCount }}</p> # 使える
  </div>
</template>

<script>
  import {mapGetters} from "vuex" # これ

  export default {
    computed: mapGetters(["doubleCount", "tripleCount"]) # これだけ, 名前変えないときはこっちでOK
    # or
    computed: mapGetters({
      myComponentDoubleCount: "doubleCount", # こっちの場合は、名称を変えることができる
      myComponentTripleCount: "tripleCount"
    })
    # 上記の書き方だと、他にcomputedを定義したいときに定義できないのでその場合はスプレッド構文を使う
    computed: {
      otherComputed() {
        # shori
      },
      ...mapGetters(["doubleCount", "tripleCount"])
    }
  }
</script>


## mutationとcommitを使って、stateを買える場所を1つに絞る
以上の場合、store内のデータはグローバル変数のような扱いであり、どこからでも変更可能。
→バグの温床となる。
それを防ぐための仕組みがmutationsやcommit。

Reactでいうactionやdispatch。
もちろんこれを使わなくてもデータの変更は可能だが、必ずこれを使ってデータ変更をするようにする。
そうすることでどこでデータ変更を行ったかがわかりやすくなる。
非同期処理をかけないことが特徴。

commitすることでmutationを使うことができる。

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    count: 2
  },
  getters: {
    doubleCount: state => state.count * 2
    tripleCount: state => state.count * 3
  },
  mutations: {
    increment(state, number) { # 第一引数はstateが入る, 第二引数は好きな値を設定可能
      state.count += number;
    }
  }
}

// home.vue
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
    <p>{{ tripleCount }}</p>
  </div>
</template>

<script>
  import {mapGetters} from "vuex" # これ

  export default {
    methods: {
      increment() {
        this.$store.commit('increment', 2) # 第一引数はmutation名, 第二引数はmutationに渡す値
      },
      decrement() {
        this.$store.commit('decrement', 2)
      }
    },
    computed: mapGetters(["doubleCount", "tripleCount"])
  }
</script>

## mapMutationsヘルパー
mapGettersのmutations版。

// home.vue
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
    <p>{{ tripleCount }}</p>
    <button @click="increment(1)">+1</button> # 引数はこちらに渡す
    <button @click="decrement(2)">-1</button> # 引数はこちらに渡す
  </div>
</template>

<script>
  import {mapGetters} from "vuex"
  import {mapMutations} from "vuex" # これ

  export default {
    methods: {
      ...mapMutations(["increment", "decrement"]) # これでmutationを使える
    },
    computed: mapGetters(["doubleCount", "tripleCount"])
  }
</script>


## 非同期でVuexを使う方法
actionを使う。
また、mutationはcommitで実行していたが、actionはdispatchで実行できる。
変更はactionを通してのみという方針もあり。

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    count: 2
  },
  getters: {
    doubleCount: state => state.count * 2
    tripleCount: state => state.count * 3
  },
  mutations: {
    increment(state, number) {
      state.count += number;
    }
  },
  actions: {
    increment(context, number) {
      context.commit('increment', number) # 第一引数はmutation名, 第二引数はmutationに渡す値
    },
    incrementAsync(context, number) {
      setTimeout(() => {
        context.commit('increment', number)
      }, 1000)
    }
  }
})

// home.vue
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
    <p>{{ tripleCount }}</p>
    <button @click="increment">+1</button>
  </div>
</template>

<script>
  export default {
    methods: {
      increment() {
        this.$store.dispatch('increment', 2) # 第一引数はaction名, 第二引数はactionに渡す値
      }
    },
  }
</script>


## mapActionsヘルパー
mapGettersのactions版。

// home.vue
<template>
  <div>
    <h3>Home</h3>
    <p>{{ doubleCount }}</p>
    <p>{{ tripleCount }}</p>
    <button @click="increment(2)">+1</button> # 引数はこちらに渡す
  </div>
</template>

<script>
  import {mapActions} from "vuex"

  export default {
    methods: {
      ...mapActions(["increment"]) # これでactionを使える
    },
  }
</script>


## 双方向バインディング(v-model)でVuexを使う方法
v-modelを使わないというか分解させて使う。
v-model = :valueと@inputなので、それらに分けて使う。

// store.js
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    message: ""
  },
  getters: {
    message: state => state.message
  },
  mutations: {
    updateMesage(state, newMessage) {
      state.message = newMessage
    }
  },
  actions: {
    updateMessage({commit}, newMessage) {
      commit('updateMesage', newMessage)
    }
  }
})

// home.vue
<template>
  <div>
    <input type="text" :value="message" @input="updateMessage"></input>
  </div>
</template>

<script>
  import {mapActions} from "vuex"

  export default {
    computed: {
      ...mapGetters(["message"])
    }
    methods: {
      updateMessage(e) {
        this.$store.dispatch("updateMessage", e.target.value)
      }
    },
  }
</script>
